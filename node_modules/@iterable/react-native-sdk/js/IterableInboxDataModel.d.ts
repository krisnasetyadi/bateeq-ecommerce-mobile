import { IterableInAppDeleteSource, IterableHtmlInAppContent } from './IterableInAppClasses';
import InboxImpressionRowInfo from './InboxImpressionRowInfo';
import InboxRowViewModel from './InboxRowViewModel';
import IterableInAppMessage from './IterableInAppMessage';
declare class IterableInboxDataModel {
    filterFn?: (message: IterableInAppMessage) => boolean;
    comparatorFn?: (message1: IterableInAppMessage, message2: IterableInAppMessage) => number;
    dateMapperFn?: (message: IterableInAppMessage) => string | undefined;
    constructor();
    set(filter?: (message: IterableInAppMessage) => boolean, comparator?: (message1: IterableInAppMessage, message2: IterableInAppMessage) => number, dateMapper?: (message: IterableInAppMessage) => string | undefined): void;
    getFormattedDate(message: IterableInAppMessage): string | undefined;
    getHtmlContentForMessageId(id: string): Promise<IterableHtmlInAppContent>;
    setMessageAsRead(id: string): void;
    deleteItemById(id: string, deleteSource: IterableInAppDeleteSource): void;
    refresh(): Promise<Array<InboxRowViewModel>>;
    startSession(visibleRows?: Array<InboxImpressionRowInfo>): void;
    endSession(visibleRows?: Array<InboxImpressionRowInfo>): Promise<void>;
    updateVisibleRows(visibleRows?: Array<InboxImpressionRowInfo>): void;
    private static sortByMostRecent;
    private defaultDateMapper;
    private processMessages;
    private sortAndFilter;
    private static getInboxRowViewModelForMessage;
}
export default IterableInboxDataModel;
