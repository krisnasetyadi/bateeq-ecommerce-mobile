'use strict';
import IterableUtil from './IterableUtil';
import { IterableInAppTrigger, IterableInAppTriggerType, IterableInboxMetadata, } from './IterableInAppClasses';
/**
 * Iterable in-app message
 */
class IterableInAppMessage {
    /**
     * the ID for the in-app message
     */
    messageId;
    /**
     * the campaign ID for this message
     */
    campaignId;
    /**
     * when to trigger this in-app
     */
    trigger;
    /**
     * when was this message created
     */
    createdAt;
    /**
     * when to expire this in-app (undefined means do not expire)
     */
    expiresAt;
    /**
     * Whether to save this message to inbox
     */
    saveToInbox;
    /**
     * Metadata such as title, subtitle etc. needed to display this in-app message in inbox.
     */
    inboxMetadata;
    /**
     * Custom Payload for this message.
     */
    customPayload;
    /**
     * Whether this inbox message has been read
     */
    read;
    /**
     * the priority value this in-app message has
     */
    priorityLevel;
    constructor(messageId, campaignId, trigger, createdAt, expiresAt, saveToInbox, inboxMetadata, customPayload, read, priorityLevel) {
        this.campaignId = campaignId;
        this.messageId = messageId;
        this.trigger = trigger;
        this.createdAt = createdAt;
        this.expiresAt = expiresAt;
        this.saveToInbox = saveToInbox;
        this.inboxMetadata = inboxMetadata;
        this.customPayload = customPayload;
        this.read = read;
        this.priorityLevel = priorityLevel;
    }
    static fromViewToken(viewToken) {
        var inAppMessage = viewToken.item["inAppMessage"];
        return new IterableInAppMessage(inAppMessage.messageId, inAppMessage.campaignId, inAppMessage.trigger, inAppMessage.createdAt, inAppMessage.expiresAt, inAppMessage.saveToInbox, inAppMessage.inboxMetadata, inAppMessage.customPayload, inAppMessage.read, inAppMessage.priorityLevel);
    }
    isSilentInbox() {
        return this.saveToInbox && this.trigger.type == IterableInAppTriggerType.never;
    }
    static fromDict(dict) {
        const messageId = dict["messageId"];
        const campaignId = dict["campaignId"];
        const trigger = IterableInAppTrigger.fromDict(dict["trigger"]);
        let createdAt = dict["createdAt"];
        if (createdAt) {
            var dateObject = new Date(0);
            createdAt = dateObject.setUTCMilliseconds(createdAt);
        }
        let expiresAt = dict["expiresAt"];
        if (expiresAt) {
            var dateObject = new Date(0);
            expiresAt = dateObject.setUTCMilliseconds(expiresAt);
        }
        let saveToInbox = IterableUtil.readBoolean(dict, "saveToInbox");
        let inboxMetadataDict = dict["inboxMetadata"];
        let inboxMetadata;
        if (inboxMetadataDict) {
            inboxMetadata = IterableInboxMetadata.fromDict(inboxMetadataDict);
        }
        else {
            inboxMetadata = undefined;
        }
        let customPayload = dict["customPayload"];
        let read = IterableUtil.readBoolean(dict, "read");
        let priorityLevel = dict["priorityLevel"];
        return new IterableInAppMessage(messageId, campaignId, trigger, createdAt, expiresAt, saveToInbox, inboxMetadata, customPayload, read, priorityLevel);
    }
}
export default IterableInAppMessage;
