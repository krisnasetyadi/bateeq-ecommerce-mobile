'use strict';
import React, { useCallback, useRef, useState } from 'react';
import { FlatList } from 'react-native';
import IterableInboxMessageCell from './IterableInboxMessageCell';
import IterableInAppMessage from './IterableInAppMessage';
const IterableInboxMessageList = ({ dataModel, rowViewModels, customizations, messageListItemLayout, deleteRow, handleMessageSelect, updateVisibleMessageImpressions, contentWidth, isPortrait }) => {
    const [swiping, setSwiping] = useState(false);
    const flatListRef = useRef(null);
    function renderRowViewModel(rowViewModel, index, last) {
        return (React.createElement(IterableInboxMessageCell, { key: rowViewModel.inAppMessage.messageId, index: index, last: last, dataModel: dataModel, rowViewModel: rowViewModel, customizations: customizations, swipingCheck: (swiping) => setSwiping(swiping), messageListItemLayout: messageListItemLayout, deleteRow: (messageId) => deleteRow(messageId), handleMessageSelect: (messageId, index) => handleMessageSelect(messageId, index), contentWidth: contentWidth, isPortrait: isPortrait }));
    }
    function getRowInfosFromViewTokens(viewTokens) {
        return viewTokens.map(function (viewToken) {
            var inAppMessage = IterableInAppMessage.fromViewToken(viewToken);
            const impression = {
                messageId: inAppMessage.messageId,
                silentInbox: inAppMessage.isSilentInbox()
            };
            return impression;
        });
    }
    const inboxSessionViewabilityConfig = {
        minimumViewTime: 500,
        itemVisiblePercentThreshold: 100,
        waitForInteraction: false
    };
    const inboxSessionItemsChanged = useCallback(((info) => {
        const rowInfos = getRowInfosFromViewTokens(info.viewableItems);
        updateVisibleMessageImpressions(rowInfos);
    }), []);
    return (React.createElement(FlatList, { ref: flatListRef, scrollEnabled: !swiping, data: rowViewModels, renderItem: ({ item, index }) => renderRowViewModel(item, index, index === rowViewModels.length - 1), keyExtractor: (item) => item.inAppMessage.messageId, viewabilityConfig: inboxSessionViewabilityConfig, onViewableItemsChanged: inboxSessionItemsChanged, onLayout: () => { flatListRef.current?.recordInteraction(); } }));
};
export default IterableInboxMessageList;
