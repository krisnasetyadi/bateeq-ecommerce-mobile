// eslint-disable-next-line @typescript-eslint/no-extraneous-class
export class MockRNIterableAPI {
    static email;
    static userId;
    static token;
    static lastPushPayload;
    static attributionInfo;
    static messages;
    static clickedUrl;
    static async getEmail() {
        return await new Promise((resolve, reject) => {
            resolve(MockRNIterableAPI.email);
        });
    }
    static setEmail(email, authToken) {
        MockRNIterableAPI.email = email;
        MockRNIterableAPI.token = authToken;
    }
    static async getUserId() {
        return await new Promise((resolve, reject) => {
            resolve(MockRNIterableAPI.userId);
        });
    }
    static setUserId(userId, authToken) {
        MockRNIterableAPI.userId = userId;
        MockRNIterableAPI.token = authToken;
    }
    static disableDeviceForCurrentUser = jest.fn();
    static trackPushOpenWithCampaignId = jest.fn();
    static updateCart = jest.fn();
    static trackPurchase = jest.fn();
    static trackInAppOpen = jest.fn();
    static trackInAppClick = jest.fn();
    static trackInAppClose = jest.fn();
    static trackEvent = jest.fn();
    static async getLastPushPayload() {
        return await new Promise((resolve, reject) => {
            resolve(MockRNIterableAPI.lastPushPayload);
        });
    }
    static async getAttributionInfo() {
        return await new Promise((resolve, reject) => {
            resolve(MockRNIterableAPI.attributionInfo);
        });
    }
    static setAttributionInfo(attributionInfo) {
        MockRNIterableAPI.attributionInfo = attributionInfo;
    }
    static initializeWithApiKey = jest.fn();
    static setInAppShowResponse = jest.fn();
    static async getInAppMessages() {
        return await new Promise((resolve, reject) => {
            resolve(MockRNIterableAPI.messages);
        });
    }
    static setAutoDisplayPaused = jest.fn();
    static async showMessage(message, consume) {
        return await new Promise((resolve, reject) => {
            resolve(MockRNIterableAPI.clickedUrl);
        });
    }
    static removeMessage = jest.fn();
    static setReadForMessage = jest.fn();
    static inAppConsume = jest.fn();
    static updateUser = jest.fn();
    static updateEmail = jest.fn();
    static handleAppLink = jest.fn();
    static updateSubscriptions = jest.fn();
    // set messages function is to set the messages static property
    // this is for testing purposes only
    static setMessages(messages) {
        MockRNIterableAPI.messages = messages;
    }
    // setClickedUrl function is to set the messages static property
    // this is for testing purposes only
    static setClickedUrl(clickedUrl) {
        MockRNIterableAPI.clickedUrl = clickedUrl;
    }
}
